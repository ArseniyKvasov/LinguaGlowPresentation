from django.shortcuts import render, redirect, get_object_or_404
from django.views.decorators.http import require_http_methods
from .ai_calls import generate_text
from .models import course, section, lesson, BaseTask, WordList, Image, MatchUpTheWords, Essay, Note, SortIntoColumns, MakeASentence, Unscramble, FillInTheBlanks, Dialogue, Article, Audio, Test, TrueOrFalse, LabelImages, EmbeddedTask, Classroom, ClassroomInvitation, UserAnswer
from django.http import HttpResponseRedirect, JsonResponse
from django.db import transaction
from django.db.models import Max
from .forms import ClassroomForm
from django.core.files.base import ContentFile
from html import unescape
from django.urls import reverse
from django.views.decorators.http import require_POST
import json
import uuid
from bs4 import BeautifulSoup
import random
from django.conf import settings
import secrets
from datetime import timezone
from django.contrib.auth import get_user_model
from django.http import HttpResponseForbidden, StreamingHttpResponse
from django.db.models import Q
from django.utils import timezone
from django.contrib.auth.decorators import login_required
import re
from django.contrib.contenttypes.models import ContentType
from django.core.files.storage import default_storage
from edge_tts import Communicate

User = get_user_model()

def home_view(request):
    if request.user.is_authenticated:
        return render(request, 'home/home.html', {
            'username': request.user.username,
            'role': getattr(request.user, 'role', None)  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–æ–ª–∏
        })
    else:
        return render(request, 'home/landing.html')

def create_course(request):
    if request.method == 'POST':
        name = request.POST.get('name')
        description = request.POST.get('description')
        student_level = request.POST.get('student_level')

        if request.user.role != "teacher":
            return JsonResponse({'error': 'You are not a teacher'})

        course.objects.create(
            name=name,
            description=description,
            student_level=student_level,
            user=request.user
        )
        return redirect('home')

    return redirect('home')

def delete_course(request, course_id):
    course_to_delete = get_object_or_404(course, id=course_id)

    if request.method == "POST" and course_to_delete.user == request.user:
        with transaction.atomic():
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, —Å–µ–∫—Ü–∏–∏ –∏ —É—Ä–æ–∫–∏
            for lesson in course_to_delete.lessons.all():
                BaseTask.objects.filter(section__lesson=lesson).delete()
                lesson.sections.all().delete()
                lesson.delete()

            # –£–¥–∞–ª—è–µ–º —Å–∞–º –∫—É—Ä—Å
            course_to_delete.delete()

    return redirect('home')

def lesson_list_view(request, course_id):
    selected_course = get_object_or_404(course, id=course_id)
    if not (request.user == selected_course.user):
        return HttpResponseForbidden("You do not have access to this lesson.")

    lessons = lesson.objects.filter(course=selected_course)

    # –ü–µ—Ä–µ–¥–∞—ë–º —É—Ä–æ–∫–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
    return render(request, 'home/lesson_list.html', {
        'lessons': lessons,
        'user': request.user,
        'course': selected_course,
    })

def add_lesson(request, course_id):
    selected_course = get_object_or_404(course, id=course_id)

    if request.method == 'POST':
        name = request.POST.get('name')
        description = request.POST.get('description')
        lexical_topics = request.POST.get('lexical_topics')
        grammar_topics = request.POST.get('grammar_topics')
        extra_topics = request.POST.get('extra_topics')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–∫–∞
        previous_lesson = selected_course.lessons.order_by('-created_at').first()

        # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–∫–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        context = previous_lesson.context if previous_lesson else {}

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        lesson_obj = lesson.objects.create(
            course=selected_course,
            name=name,
            description=description,
            lexical_topics=lexical_topics,
            grammar_topics=grammar_topics,
            extra_topics=extra_topics,
            context=context  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        )

        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–µ–∫—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
        section.objects.create(
            lesson=lesson_obj,
            name="Let's begin! üòâ",
            order=1,
        )

        return redirect('lesson_list', course_id=course_id)

    return redirect('lesson_list', course_id=course_id)

def lesson_page_view(request, lesson_id):
    lesson_obj = get_object_or_404(lesson, id=lesson_id)
    course_obj = get_object_or_404(course, id=lesson_obj.course.id)
    if request.user != course_obj.user:
        return HttpResponseForbidden("You do not have access to this lesson.")

    sections = lesson_obj.sections.all().order_by('order')
    tasks = BaseTask.objects.filter(section__lesson=lesson_obj).order_by('section__order', 'order')
    classrooms = Classroom.objects.filter(Q(teachers=request.user) | Q(students=request.user)).distinct()

    return render(request, 'builder/updated_templates/generation.html', {
        'lesson': lesson_obj,
        'section_list': sections,
        'tasks': tasks,
        'classrooms': classrooms,
        'user_role': 'teacher',
        "mode": "generation"
    })

def delete_lesson(request, lesson_id):
    lesson_to_delete = get_object_or_404(lesson, id=lesson_id)

    if request.user != lesson_to_delete.course.user:
        return HttpResponseForbidden("You do not have access to this lesson.")

    for section in lesson_to_delete.sections.all():
        tasks = BaseTask.objects.filter(section=section)
        for task in tasks:
            delete_task_handler(request.user, task)
        section.delete()

    course_id = lesson_to_delete.course.id

    if request.method == "POST":
        lesson_to_delete.delete()

    return HttpResponseRedirect(reverse('lesson_list', args=[course_id]))

def add_section(request, lesson_id):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            section_name = data.get('name')

            if not section_name:
                return JsonResponse({'error': '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}, status=400)

            lesson_obj = get_object_or_404(lesson, id=lesson_id)

            if lesson_obj.course.user != request.user:
                return JsonResponse({'error': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞–∑–¥–µ–ª—ã –≤ —É—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.'}, status=403)

            max_order = lesson_obj.sections.aggregate(Max('order'))['order__max']
            next_order = (max_order or 0) + 1  # –ï—Å–ª–∏ max_order None (—Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–µ—Ç), —Ç–æ –Ω–∞—á–∞—Ç—å —Å 1

            section_obj = section.objects.create(
                lesson=lesson_obj,
                name=section_name,
                order=next_order
            )
            return JsonResponse({
                'success': True,
                'section_id': section_obj.id,
                'name': section_obj.name
            })
        except Exception as e:
            print(e)
            return JsonResponse({'error': str(e)}, status=500)
    return JsonResponse({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}, status=405)

def update_section(request, section_id):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            new_name = data.get('name')

            if not new_name:
                return JsonResponse({'error': '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.'}, status=400)

            section_obj = get_object_or_404(section, id=section_id)

            if section_obj.lesson.course.user != request.user:
                return JsonResponse({'error': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª—ã —É—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.'}, status=403)

            section_obj.name = new_name
            section_obj.save()

            return JsonResponse({'success': True, 'new_name': new_name})
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    return JsonResponse({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.'}, status=405)

def delete_section_view(request, section_id):
    section_obj = get_object_or_404(section, id=section_id)
    lesson_id = section_obj.lesson.id  # –î–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Ä–æ–∫–∞

    if len(section_obj.lesson.sections.all()) == 1:
        return JsonResponse({'error': '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª.'}, status=400)

    if request.user != section_obj.lesson.course.user:
        return JsonResponse({'error': '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ä–∞–∑–¥–µ–ª—ã —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞.'}, status=403)

    if request.method == "POST":
        with transaction.atomic():
            tasks = BaseTask.objects.filter(section=section_obj)
            for task in tasks:
                delete_task_handler(request.user, task)

            section_obj.delete()

            sections = section.objects.filter(lesson_id=lesson_id).order_by('order')

            for index, section_obj in enumerate(sections, start=1):
                section.objects.filter(id=section_obj.id).update(order=index)

    return redirect('lesson_page', lesson_id=lesson_id)




def getContext(request, lesson_id):
    lesson_obj = get_object_or_404(lesson, id=lesson_id)

    if request.method == "GET":
        return JsonResponse({'context': lesson_obj.context or ""})

def addContextElement(request, lesson_id):
    if request.method != "POST":
        return JsonResponse({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."}, status=405)

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
    lesson_instance = get_object_or_404(lesson, id=lesson_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫—É—Ä—Å–∞
    if request.user != lesson_instance.course.user:
        return JsonResponse({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."}, status=403)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    try:
        data = json.loads(request.body)
        task_id = data.get("task_id")
        header = data.get("header", "")
        content = data.get("content", "")
    except json.JSONDecodeError:
        return JsonResponse({"error": "–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ."}, status=400)

    if not content:
        return JsonResponse({"error": "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."}, status=400)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context = lesson_instance.context or {}

    # –ï—Å–ª–∏ task_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–ª—é—á
    if not task_id:
        task_id = f"text_{uuid.uuid4().hex[:8]}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π task_id
    if task_id in context:
        return JsonResponse({"error": "–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç."}, status=400)


    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    context[task_id] = {"header": header, "content": content}
    lesson_instance.context = context
    lesson_instance.save()

    return JsonResponse({"message": "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", "task_id": task_id, "header": header, "content": content}, status=201)

def removeTaskFromContext(request, lesson_id, task_id):
    if request.method != "DELETE":
        return JsonResponse({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."}, status=405)

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
    lesson_instance = get_object_or_404(lesson, id=lesson_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø
    if request.user != lesson_instance.course.user:
        return JsonResponse({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω."}, status=403)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞
    context = lesson_instance.context or {}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π task_id
    if task_id not in context:
        return JsonResponse({"error": "–¢–∞–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç."}, status=404)

    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
    del context[task_id]
    lesson_instance.context = context
    lesson_instance.save()

    return JsonResponse({"message": "–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.", "task_id": task_id}, status=200)





        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π





def get_section_tasks(request, section_id):
    try:
        section_instance = get_object_or_404(section, id=section_id)
        tasks = BaseTask.objects.filter(section=section_instance)
        data = {}
        for task in tasks:
            data[task.content_type.model] = task.id
        return JsonResponse(data)
    except Exception as e:
        print(e)
        return JsonResponse({"error": str(e)}, status=500)

def get_task_data(request, task_id):
    try:
        task_instance = get_object_or_404(BaseTask, id=task_id)
        content_type = task_instance.content_type
        content_object = task_instance.content_object
        model_class = content_type.model_class()
        is_owner = request.user == task_instance.section.lesson.course.user

        # Common data for all task types
        base_data = {
            "id": task_id,
            "taskType": content_type.model,
            "title": getattr(content_object, 'title', None),
        }

        # Handle task types that don't depend on ownership
        match model_class:
            case WordList:
                return JsonResponse({
                    **base_data,
                    "words": content_object.words,
                })

            case MatchUpTheWords:
                return JsonResponse({
                    **base_data,
                    "pairs": content_object.pairs,
                })

            case Essay:
                return JsonResponse({
                    **base_data,
                    "conditions": content_object.conditions,
                })

            case Note | Article:
                return JsonResponse({
                    **base_data,
                    "content": content_object.content,
                })

            case Image:
                return JsonResponse({
                    **base_data,
                    "image_url": content_object.image_url,
                })

            case Dialogue:
                return JsonResponse({
                    **base_data,
                    "lines": content_object.lines,
                })

            case Audio:
                return JsonResponse({
                    **base_data,
                    "audio_url": content_object.audio_url,
                    "transcript": content_object.transcript,
                })

            case EmbeddedTask:
                return JsonResponse({
                    **base_data,
                    "embed_code": content_object.embed_code,
                })

        # Handle task types that depend on ownership
        if is_owner:
            match model_class:
                case SortIntoColumns:
                    labels = []
                    for column in content_object.columns:
                        labels.extend(column['words'])
                    random.shuffle(labels)
                    return JsonResponse({
                        **base_data,
                        "columns": content_object.columns,
                        "labels": labels,
                    })

                case MakeASentence:
                    return JsonResponse({
                        **base_data,
                        "sentences": content_object.sentences,
                    })

                case Unscramble:
                    return JsonResponse({
                        **base_data,
                        "words": content_object.words,
                    })

                case FillInTheBlanks:
                    labels = re.findall(r'\[(.*?)\]', content_object.text)
                    random.shuffle(labels)
                    return JsonResponse({
                        **base_data,
                        "text": content_object.text,
                        "display_format": content_object.display_format,
                        "labels": labels,
                    })

                case Test:
                    return JsonResponse({
                        **base_data,
                        "questions": content_object.questions,
                    })

                case TrueOrFalse:
                    return JsonResponse({
                        **base_data,
                        "statements": content_object.statements,
                    })

                case LabelImages:
                    labels = [img['label'] for img in content_object.images]
                    random.shuffle(labels)
                    return JsonResponse({
                        **base_data,
                        "images": content_object.images,
                        "labels": labels,
                    })
        else:
            match model_class:
                case SortIntoColumns:
                    columns = content_object.columns
                    labels = []
                    for column in columns:
                        for i in range(len(column['words'])):
                            word = column['words'][i]
                            column['words'][i] = '/'
                            labels.append(word)
                    random.shuffle(labels)
                    return JsonResponse({
                        **base_data,
                        "columns": columns,
                        "labels": labels,
                    })

                case MakeASentence:
                    array = content_object.sentences
                    for sentence_data in array:
                        sentence_data['correct'] = '/ ' * (len(sentence_data['correct'].split(' ')) - 1)
                    return JsonResponse({
                        **base_data,
                        "sentences": array,
                    })

                case Unscramble:
                    array = content_object.words
                    for word_data in array:
                        word_data['word'] = '/' * len(word_data['word'])
                    return JsonResponse({
                        **base_data,
                        "words": array,
                    })

                case FillInTheBlanks:
                    text = content_object.text
                    labels = re.findall(r'\[(.*?)\]', text)
                    text = re.sub(r'\[(.*?)\]', lambda m: '[' + '/' + ']', text)
                    if content_object.display_format != "withList":
                        labels = []
                    else:
                        random.shuffle(labels)
                    return JsonResponse({
                        **base_data,
                        "text": text,
                        "display_format": content_object.display_format,
                        "labels": labels,
                    })

                case Test:
                    questions = content_object.questions
                    for q in questions:
                        for answer in q["answers"]:
                            answer["is_correct"] = False
                    return JsonResponse({
                        **base_data,
                        "questions": questions,
                    })

                case TrueOrFalse:
                    statements = content_object.statements
                    for s in statements:
                        s["is_true"] = False
                    return JsonResponse({
                        **base_data,
                        "statements": statements,
                    })

                case LabelImages:
                    array = content_object.images
                    labels = []
                    for image_data in array:
                        labels.append(image_data['label'])
                        image_data['label'] = '/'
                    random.shuffle(labels)
                    return JsonResponse({
                        **base_data,
                        "images": array,
                        "labels": labels,
                    })

        # If no match found
        return JsonResponse({"error": "Unknown task type"}, status=400)

    except Exception as e:
        print(e)
        return JsonResponse({"error": str(e)}, status=500)







ALLOWED_TYPES = ["image/jpeg", "image/png", "image/gif"]
MAX_SIZE = 5 * 1024 * 1024  # 5MB

ALLOWED_AUDIO_TYPES = ['audio/mpeg', 'audio/mp3', 'audio/wav']
MAX_AUDIO_SIZE = 10 * 1024 * 1024  # 10MB

@transaction.atomic
@require_POST
def taskSave(request, section_id):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ (–±–µ–∑ —Ñ–∞–π–ª–æ–≤) –≤ –º–æ–¥–µ–ª–∏. –û–∂–∏–¥–∞–µ—Ç, —á—Ç–æ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON:

        {
            "obj_id": <optional: id —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è>,
            "task_type": "<—Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è>",
            "payloads": { ... }  # –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è (payloads)
        }

    –î–ª—è –∑–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ LabelImages –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è process_label_images.
    """
    section_instance = get_object_or_404(section, id=section_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if request.user != section_instance.lesson.course.user:
        return JsonResponse({'success': False, 'error': '–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫—É—Ä—Å—É.'}, status=403)

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ
        if len(request.body) > settings.DATA_UPLOAD_MAX_MEMORY_SIZE:
            return JsonResponse({'success': False,
                                 'error': f'–ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.DATA_UPLOAD_MAX_MEMORY_SIZE / 1024 / 1024}MB'},
                                status=413)

        data = json.loads(request.body)
        obj_id = data.get('obj_id')
        task_type = data.get('task_type')
        payloads = data.get('payloads', {})

        model_class = globals().get(task_type)
        if not model_class:
            return JsonResponse({'success': False, 'error': 'Invalid task type'}, status=400)

        # –°–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö
        total_size = len(request.body)  # –†–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–π—Ç–∞—Ö

        with transaction.atomic():
            # –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
            if obj_id:
                task_instance = get_object_or_404(BaseTask, id=obj_id)
                task_instance.size = total_size
                print(task_instance.size)
                content_object = task_instance.content_object
                if not isinstance(content_object, model_class):
                    return JsonResponse({'success': False, 'error': 'Task type mismatch'}, status=400)
                for key, value in payloads.items():
                    setattr(content_object, key, value)
                content_object.save()
                task_instance.save()
            else:
                content_object = model_class.objects.create(**payloads)
                current_order = BaseTask.objects.filter(section=section_instance).aggregate(Max('order'))['order__max']
                new_order = 1 if current_order is None else current_order + 1
                task_instance = BaseTask.objects.create(
                    section=section_instance,
                    content_object=content_object,
                    content_type=ContentType.objects.get_for_model(model_class),
                    order=new_order,
                    size=total_size,
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω–∏–º–∞–µ–º–æ–º –æ–±—ä–µ–º–µ –ø–∞–º—è—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            request.user.update_used_storage(total_size)

        return JsonResponse({'success': True, 'task_id': task_instance.id, 'section_id': section_id})

    except json.JSONDecodeError:
        return JsonResponse({'success': False, 'error': 'Invalid JSON'}, status=400)
    except Exception as e:
        print(e)
        return JsonResponse({'success': False, 'error': "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."}, status=500)

def upload_image(request):
    if request.method == 'POST' and request.FILES.get('image'):
        image = request.FILES['image']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if image.content_type not in ALLOWED_TYPES:
            return JsonResponse({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –î–æ–ø—É—Å—Ç–∏–º—ã: JPG, PNG, GIF'}, status=400)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        if image.size > MAX_SIZE:
            return JsonResponse({'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ‚Äî 5MB'}, status=400)

        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        image_data = image.read()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        ext = image.name.split('.')[-1].lower()
        short_id = secrets.token_urlsafe(6)
        file_name = f'uploads/i_{short_id}.{ext}'

        saved_path = default_storage.save(file_name, ContentFile(image_data))
        full_url = f'/media/{saved_path}'

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        request.user.update_used_storage(image.size)

        return JsonResponse({
            'success': True,
            'message': '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω',
            'url': full_url
        })

    return JsonResponse({'error': '–§–∞–π–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'}, status=400)

def upload_audio(request):
    if request.method == 'POST' and request.FILES.get('audio'):
        audio = request.FILES['audio']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
        if audio.content_type not in ALLOWED_AUDIO_TYPES:
            return JsonResponse({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –î–æ–ø—É—Å—Ç–∏–º—ã: MP3, WAV'}, status=400)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        if audio.size > MAX_AUDIO_SIZE:
            return JsonResponse({'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 10MB'}, status=400)

        audio_data = audio.read()

        ext = audio.name.split('.')[-1].lower()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏
        short_id = secrets.token_urlsafe(6)  # –ü—Ä–∏–º–µ—Ä–Ω–æ 8 —Å–∏–º–≤–æ–ª–æ–≤
        file_name = f'uploads/a_{short_id}.{ext}'

        saved_path = default_storage.save(file_name, ContentFile(audio_data))
        full_url = f'/media/{saved_path}'

        request.user.update_used_storage(audio.size)

        return JsonResponse({
            'success': True,
            'message': '–ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ',
            'url': full_url
        })

    return JsonResponse({'error': '–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'}, status=400)







def delete_task_handler(user, task):
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç - —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–æ —É–¥–∞–ª—è–µ–º —Å–∞–º —Ñ–∞–π–ª –∏ –æ–±—ä–µ–∫—Ç

    if isinstance(task.content_object, Image):
        image_file_path = task.content_object.image_url  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (URL)
        delete_image(user, image_file_path)


    elif isinstance(task.content_object, LabelImages):
        image_files = [image_object['url'] for image_object in task.content_object.images]
        for image_file in image_files:
            delete_image(user, image_file)

    user.used_storage -= task.size
    user.save()
    print('–ü–æ—Å–ª–µ', user.used_storage)
    task.delete()





    # –ó–∞–ø—Ä–æ—Å –∫ –ò–ò

def delete_image(user, image_url):
    """
    –£–¥–∞–ª—è–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –µ–≥–æ URL –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç used_storage –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    print(image_url)
    if not image_url or not image_url.startswith('/media/'):
        return {"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL"}

    relative_path = image_url.replace('/media/', '', 1)
    print(relative_path, default_storage.exists(relative_path))

    if default_storage.exists(relative_path):
        image_size = default_storage.size(relative_path)
        default_storage.delete(relative_path)

        # –û–±–Ω–æ–≤–ª—è–µ–º used_storage
        user.used_storage = max(0, user.used_storage - image_size)
        user.save()

        print(user.used_storage, 'lol')

        return {"success": True, "freed_storage_bytes": image_size}

    return {"success": False, "error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}

@require_http_methods(["DELETE"])
def delete_task(request, task_id):
    try:
        with transaction.atomic():
            task_instance = BaseTask.objects.get(id=task_id)
            course_instance = task_instance.section.lesson.course

            if request.user != course_instance.user:
                return JsonResponse({"error": "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"}, status=403)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
            section_instance = task_instance.section
            task_order = task_instance.order

            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if task_instance.content_object:
                delete_task_handler(request.user, task_instance)

            # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∑–∞–¥–∞—á—É
            if task_instance.id is not None:
                task_instance.delete()

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞–Ω–∏–π
            remaining_tasks = BaseTask.objects.filter(section=section_instance, order__gt=task_order)
            for task_elem in remaining_tasks:
                task_elem.order -= 1
                task_elem.save()

            return JsonResponse({"success": True})
    except BaseTask.DoesNotExist:
        return JsonResponse({"error": "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}, status=404)
    except Exception as e:
        print(e)
        return JsonResponse({"error": str(e)}, status=500)


# –ó–∞–ø—Ä–æ—Å –∫ –ò–ò
def generateRequest(request):
    # Initial validation
    match request.method:
        case 'POST':
            pass
        case _:
            return JsonResponse({'status': 'error', 'message': 'POST only'}, status=405)

    try:
        # Authorization check
        match request.user.role:
            case 'teacher':
                pass
            case _:
                return JsonResponse(
                    {'status': 'error', 'message': 'Only teachers can generate requests'},
                    status=403
                )

        # Parse request data
        data = json.loads(request.body)
        lesson_id = data.get('lessonId')
        task_type = data.get('taskType')
        context_flag = data.get('context', False)
        emoji = data.get('emoji', False)
        quantity = data.get('quantity', 2)
        fill_type = data.get('fillType', 'lexical')
        match_type = data.get('matchType', '')
        test_type = data.get('testType', 'auto')
        language = data.get('language', 'en')
        sentence_length = data.get('sentenceLength', 6)
        user_query = data.get('query', '')
        image_data = data.get('image', None)

        # Process image data if present
        if image_data:
            match image_data:
                case str() as img_str if img_str.startswith('data:image/'):
                    image_data = img_str.split(',')[1]
                case _:
                    return JsonResponse({
                        'status': 'error',
                        'message': 'Invalid image format. Expected base64 data URL.'
                    }, status=400)

        lesson_obj = get_object_or_404(lesson, id=lesson_id)

        # Determine model based on image presence
        use_image_model = image_data is not None and image_data != ''
        model = "meta-llama/llama-4-maverick-17b-128e-instruct" if use_image_model else "llama3-70b-8192"
        print(model)

        # Generate query based on task type
        base_query = ""
        match task_type:
            case "WordList":
                base_query = "Create a list of English words with Russian translations"
                if user_query:
                    base_query += f" on the topic: '{user_query}'"
                base_query += ". The words should be useful for learning, including common vocabulary."
                base_query += " JSON format: ```json{'title': str, 'words': [{'word': str, 'translation': str}]}```."

            case "Note":
                base_query = "Write a well-structured note"
                if user_query:
                    base_query += f" on the topic: '{user_query}'"
                else:
                    base_query += " based on the provided context"
                base_query += ". Use HTML tags + Bootstrap for nice formatting."
                base_query += " JSON format: ```json{'title': str, 'content': str}```."

            case "FillInTheBlanks":
                type_desc = {
                    'lexical': "lexical ",
                    'grammar': "grammar ",
                    None: ""
                }.get(fill_type, "")

                base_query = f"Create a {type_desc}fill-in-the-blanks exercise"
                if user_query:
                    base_query += f" on the topic: '{user_query}'"
                base_query += " Each sentence should contain exactly one gap (mark as _), with one correct answer. Sentences should be completely in English."
                base_query += " JSON format: ```json{'title': str, 'instructions': str, 'sentences': [{'text': str, 'answer': str}]}```."

            case "MatchUpTheWords":
                type_desc = {
                    'word-translate': "matching English words with their translations",
                    'question-answer': "questions and answers",
                    'beginning-continuation': "phrase beginnings and their continuations",
                    'card1-card2': "words and their antonyms/synonyms",
                    None: "paired elements"
                }.get(match_type, "")

                base_query = f"Create a matching exercise for {type_desc}"
                if user_query:
                    base_query += f" on the topic: '{user_query}'"
                base_query += ". Ensure logical connection between paired elements."
                base_query += " JSON format: ```json{'title': str, 'pairs': [{'card1': str, 'card2': str}]}```."

            case "Article":
                lang_desc = "English" if language == 'en' else "Russian"
                base_query = f"Write an informative article in {lang_desc}."
                if user_query:
                    base_query += f" on the topic: '{user_query}'"
                base_query += ". Use HTML tags + Bootstrap for nice formatting."
                base_query += " JSON format: ```json{'title': str, 'content': str}```."

            case "Test":
                type_desc = {
                    'lexical': "lexical test",
                    'grammar': "grammar test",
                    'understanding': "reading comprehension test",
                    None: "test"
                }.get(test_type, "")

                lang_desc = "English" if language == 'en' else "Russian"
                base_query = f"Create a {type_desc} in {lang_desc} with answer options"
                if user_query:
                    base_query += f" on the topic: '{user_query}'"
                base_query += " JSON format: ```json{'title': str, 'questions': [{'text': str, 'answers': [{'text': str, 'is_correct': bool}]}]}```."

            case "TrueOrFalse":
                type_desc = {
                    'lexical': "testing vocabulary knowledge",
                    'grammar': "testing grammar knowledge",
                    'understanding': "testing text comprehension",
                    None: ""
                }.get(test_type, "")

                lang_desc = "English" if language == 'en' else "Russian"
                base_query = f"Create True/False questions {type_desc} in {lang_desc}"
                if user_query:
                    base_query += f" on the topic: '{user_query}'"
                base_query += ". Questions should be clear and unambiguous."
                base_query += " JSON format: ```json{'title': str, 'statements': [{'text': str, 'is_true': bool}]}```."

            case "MakeASentence":
                length_desc = {
                    1: "simple short sentences (5-7 words)",
                    2: "standard sentences (8-12 words)",
                    3: "complex long sentences (13+ words)"
                }.get(sentence_length, "sentences")

                base_query = f"Create {length_desc} in English"
                if user_query:
                    base_query += f" using vocabulary on the topic: '{user_query}'"
                base_query += ". Sentences should be grammatically correct and natural."
                base_query += " JSON format: ```json{'title': str, 'sentences': [{'sentence': str}]}```."

            case "SortIntoColumns":
                base_query = "Create an exercise for sorting English words into categories"
                if user_query:
                    base_query += f" on the topic: '{user_query}'"
                base_query += ". Categories should be clearly defined, and words should be unambiguously classifiable."
                base_query += " JSON format: ```json{'title': str, 'columns': [{'title': str, 'words': [...]}]}```."

            case "Essay":
                base_query = "Come up with an interesting essay topic in English"
                if user_query:
                    base_query += f" within the theme: '{user_query}'"
                base_query += ". The topic should be debatable and provoke a detailed response."
                base_query += " JSON format: ```json{'title': str}```."

            case "Transcript":
                base_query = "Create a transcript of an English monologue"
                if user_query:
                    base_query += f" on the topic: '{user_query}'"
                base_query += " JSON format: ```json{'title': str, 'transcript': str}```."

            case _:
                return JsonResponse(
                    {'status': 'error', 'message': 'Invalid task type'},
                    status=400
                )

        # Add common parameters
        match quantity:
            case 1:
                base_query += " Prepare a small exercise."
            case 3:
                base_query += " Prepare a large exercise."

        if emoji:
            base_query += " Add Unicode characters for the emojis."

        # Context handling
        if context_flag and not use_image_model:
            lesson_context = lesson_obj.context
            context_lines = []

            for key, value in lesson_context.items():
                if key == "base":
                    continue

                header = value.get("header", "")
                content = value.get("content", "")

                match header:
                    case "Word list":
                        words = re.findall(r"<b>(.*?)</b>", content)
                        line = f"{header}: {','.join(words)}"
                        context_lines.append(line)
                    case _:
                        text = BeautifulSoup(content, "html.parser").get_text()
                        text = re.sub(r'[^\w\s,.!?-]', '', text)
                        cleaned = text.strip()
                        if cleaned:
                            line = f"{header}: {cleaned}"
                            context_lines.append(line)

            context = "Context: \n" + '\n'.join(context_lines) + '\n'
            base_query = context + base_query

        print(image_data)
        # Generate response
        response = generate_text(
            prompt=base_query,
            model=model,
            image_data=image_data,
        )
        print(response)

        try:
            return JsonResponse({
                'status': 'success',
                'data': response
            })
        except ValueError as e:
            print("Error:", e)
            return JsonResponse({
                'status': 'error',
                'message': str(e),
                'raw_response': response[:1000]
            }, status=500)

    except Exception as e:
        print("Error:", e)
        return JsonResponse({'status': 'error', 'message': str(e)}, status=500)




def normalize(text: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç: —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è, —É–¥–∞–ª—è–µ—Ç –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é, —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É."""
    if not isinstance(text, str):
        return ''

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ –¥–ª—è "won't" -> "will not"
    text = re.sub(r"\bwon't\b", "will not", text, flags=re.IGNORECASE)

    # –ó–∞–º–µ–Ω—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è n't –Ω–∞ not
    text = re.sub(r"n't\b", " not", text, flags=re.IGNORECASE)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º I'm -> I am
    text = re.sub(r"\bI'm\b", "I am", text, flags=re.IGNORECASE)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º you're, we're, they're -> you are, we are, they are
    text = re.sub(r"\b(\w+)'re\b", r"\1 are", text, flags=re.IGNORECASE)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º he's, she's, it's, what's, who's, where's, how's -> he is, she is –∏ —Ç.–ø.
    def replace_s(match):
        word = match.group(1).lower()
        if word in ['he', 'she', 'it', 'that', 'what', 'where', 'who', 'how', 'there']:
            return match.group(1) + " is"
        else:
            return match.group(1)

    text = re.sub(r"\b(\w+)'s\b", replace_s, text, flags=re.IGNORECASE)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º let‚Äôs -> let us
    text = re.sub(r"\blet's\b", "let us", text, flags=re.IGNORECASE)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤
    text = re.sub(r"[^\w\s]", "", text)

    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    text = re.sub(r"\s+", " ", text)

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –æ–±—Ä–µ–∑–∞–µ–º
    return text.strip().lower()

def handleLabelimagesAnswer(object, answer):
    """
    object.images = [
        {"url": "...", "label": "dance"},
        ...
    ]

    answer = {
        "image_index": 0,
        "label": "dance"
    }
    """
    try:
        image = object.images[answer['image_index']]
        return normalize(image['label'].strip()) == normalize(answer['label'].strip())
    except (IndexError, KeyError, AttributeError):
        return False

def handleMakeasentenceAnswer(object, answer):
    """
    answer = {
        sentenceIndex: 0,      # –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
        fromIndex: 0,          # –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞ –≤ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω–æ–º (shuffled)
        toIndex: 2             # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º (correct)
    }
    """
    sentence_index = answer['sentenceIndex']
    from_index = answer['fromIndex']
    to_index = answer['toIndex']

    try:
        sentence_obj = object.sentences[sentence_index]
        correct_words = sentence_obj['correct'].split()
        shuffled_words = sentence_obj['shuffled'].split()

        if from_index >= len(shuffled_words) or to_index >= len(correct_words):
            return False

        word_from_shuffled = shuffled_words[from_index]
        expected_word_in_correct = correct_words[to_index]

        return normalize(word_from_shuffled) == normalize(expected_word_in_correct)
    except (IndexError, KeyError):
        return False

def handleUnscrambleAnswer(object, answer):
    """
    answer = {
        wordIndex: 0,      // –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ
        fromIndex: 0,      // –∏–Ω–¥–µ–∫—Å –±—É–∫–≤—ã –≤ shuffled_word
        toIndex: 2         // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–ª–æ–≤–µ
    }
    """
    word_index = answer['word_index']
    gap_index = answer['gap_index']
    letter_index = answer['letter_index']

    try:
        target_word = object.words[word_index]
        correct_letter = target_word['word'][gap_index]
        provided_letter = target_word['shuffled_word'][letter_index]

        return normalize(correct_letter) == normalize(provided_letter)
    except (IndexError, KeyError):
        return False

def handleTrueorfalseAnswer(object, answer):
    """
    object ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–ª–µ–Ω–∏–π:
        [{"text": "Small animals do not play a crucial role in maintaining the balance of nature.", "is_true": false}, ...]
    answer ‚Äî —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞:
        {"statement": "Insects help in pollination, which is vital for plant reproduction.", "selected_answer": "true"}
    """
    statement_text = answer.get("statement", "").strip()
    selected_answer = answer.get("selected_answer", "").strip().lower()

    if not statement_text or selected_answer not in ["true", "false"]:
        return False

    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    for statement in object.statements:
        if statement.get("text", "") == statement_text:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            correct_answer = "true" if statement.get("is_true", False) else "false"
            return selected_answer == correct_answer

    return False

def handleTestAnswer(object, answer):
    """
    object ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:
        [{"text": "Question?", "answers": [{"text": "a", "is_correct": true}, ...]}, ...]
    answer ‚Äî —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞:
        {"question": "What animal is known for its meow?", "selected_answer": "cat"}
    """
    question_text = answer.get("question", "").strip()
    selected_text = answer.get("selected_answer", "").strip()

    if not question_text or not selected_text:
        return False

    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    for question in object.questions:
        if question.get("text", "") == question_text:
            # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–≤–µ—Ç —Å—Ä–µ–¥–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            for option in question.get("answers", []):
                if option.get("text", "") == selected_text:
                    return option.get("is_correct", False)

    return False

def handleFillintheblanksAnswer(object, answer):
    """
    content ‚Äî HTML-—Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        'The [wolf] is a wild animal...'
    answer ‚Äî —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {'index': 0, 'answer': 'wolf'}
    """
    index = answer.get('index')
    user_input = answer.get('answer', '').strip()

    if index is None or not user_input:
        return False

    # –£–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    clean_text = unescape(re.sub(r'<[^>]+>', '', object.text))

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –≤–∏–¥–µ [word]
    correct_answers = re.findall(r'\[(.+?)\]', clean_text)

    if index >= len(correct_answers):
        return False

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ (–±–µ–∑ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
    correct_word = normalize(correct_answers[index])
    user_word = normalize(user_input)

    return user_word == correct_word

def handleMatchupthewordsAnswer(object, answer):
    """
    object ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤–∏–¥–∞ [{'card1': 'read', 'card2': '—á–∏—Ç–∞—Ç—å'}, ...]
    answer ‚Äî —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {'card 1': 'read', 'card 2': '—á–∏—Ç–∞—Ç—å'}
    """
    print(answer)
    card1 = answer.get('card 1')
    card2 = answer.get('card 2')

    for pair in object.pairs:
        if normalize(pair.get('card1')) == normalize(card1) and normalize(pair.get('card2')) == normalize(card2):
            return True
    return False

def handleSortintocolumnsAnswer(object, answer):
    column_name = answer.get('column_name')
    word = answer.get('word')

    is_correct = False
    for category in object.columns:
        if category['name'] == column_name:
            is_correct = word in category['words']
            break

    return is_correct

def check_answer(task_id, answer):
    task = get_object_or_404(BaseTask, id=task_id)
    task_type = task.content_type.model

    if task_type == 'essay':
        return True

    handler_name = f"handle{task_type.capitalize()}Answer"

    handler_func = globals().get(handler_name)
    if callable(handler_func):
        return handler_func(task.content_object, answer)
    else:
        return JsonResponse({'status': 'error', 'message': f'Handler {handler_name} not found'}, status=500)

def calculate_max_score(task_obj):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ç–∏–ø–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"""
    content = task_obj.content_object
    task_type = task_obj.content_type.model

    if task_type == 'matchupthewords':
        return len(content.pairs)

    elif task_type == 'fillintheblanks':
        clean_text = unescape(re.sub(r'<[^>]+>', '', content.text))
        return len(re.findall(r'\[(.+?)\]', clean_text))

    elif task_type == 'test':
        return sum(1 for question in content.questions if any(ans['is_correct'] for ans in question['answers']))

    elif task_type == 'trueorfalse':
        return len(content.statements)

    elif task_type == 'labelimages':
        return len(content.images)

    elif task_type == 'unscramble':
        words = [word['word'] for word in content.words]
        total_length = sum(len(word) for word in words)  # –û–±—â–∞—è –¥–ª–∏–Ω–∞ –≤—Å–µ—Ö —Å–ª–æ–≤
        print(words, total_length)
        return total_length

    elif task_type == 'makeasentence':
        return sum(len(sentence['correct'].split()) for sentence in content.sentences)

    elif task_type == 'sortintocolumns':
        return sum(len(col['words']) for col in content.columns)

    return 10

@require_POST
def receiveAnswer(request):
    try:
        data = json.loads(request.body)
        task_id = data.get('task_id')
        answer = data.get('answer')
        classroom_id = data.get('classroom_id')
        user_id = data.get('user_id')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not task_id or not answer:
            return JsonResponse({
                'status': 'error',
                'message': 'Missing task_id, answer or classroom_id in request'
            }, status=400)

        isCorrect = check_answer(task_id, answer)

        if not classroom_id:
            task_obj = BaseTask.objects.get(id=task_id)
            if request.user != task_obj.section.lesson.course.user:
                return JsonResponse({
                    'status': 'error',
                    'message': 'You can not receive answers for this task'
                }, status=404)
            return JsonResponse({
                'status': 'success',
                'isCorrect': isCorrect,
                'task_id': task_id,
                'received_answer': answer,
            })

        task_obj = BaseTask.objects.get(id=task_id)
        classroom_obj = Classroom.objects.get(id=classroom_id)
        user = User.objects.get(id=user_id)

        if not task_obj or not classroom_obj or not user:
            return JsonResponse({
                'status': 'error',
                'message': 'Task or classroom or user not found'
            }, status=404)

        if request.user != user and request.user not in classroom_obj.teachers.all() and request.user not in classroom_obj.students.all():
            return JsonResponse({
                'status': 'error',
                'message': 'You are not authorized to see this answer.'
            }, status=403)

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å UserAnswer
        user_answer, created = UserAnswer.objects.get_or_create(
            classroom=classroom_obj,
            task=task_obj,
            user=user,
            defaults={
                'answer_data': [],
                'correct_answers': 0,
                'incorrect_answers': 0,
                'max_score': calculate_max_score(task_obj),
            }
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        answer_exists = any(
            existing_answer['answer'] == answer
            for existing_answer in user_answer.answer_data
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –º–∞—Å—Å–∏–≤ (–¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏)
        answer_entry = {
            'answer': answer,
            'is_correct': isCorrect,
            'timestamp': timezone.now().isoformat(),
            'counted': not answer_exists
        }

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–æ–≤—ã–π
        if not answer_exists:
            if task_obj.content_type == 'essay':
                user_answer.answer_data = [answer_entry]
            else:
                user_answer.answer_data.append(answer_entry)
                if isCorrect:
                    user_answer.correct_answers += 1
                else:
                    user_answer.incorrect_answers += 1

        user_answer.save()

        max_progress_score = user_answer.max_score + user_answer.incorrect_answers
        if task_obj.content_type.model == 'test' or task_obj.content_type.model == 'trueorfalse':
            max_progress_score = user_answer.max_score

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return JsonResponse({
            'status': 'success',
            'isCorrect': isCorrect,
            'task_id': task_id,
            'received_answer': answer,
            'correct_count': user_answer.correct_answers,
            'incorrect_count': user_answer.incorrect_answers,
            'max_score': max_progress_score,
            'answer_exists': answer_exists
        })

    except json.JSONDecodeError:
        return JsonResponse({
            'status': 'error',
            'message': 'Invalid JSON data'
        }, status=400)
    except Exception as e:
        print(e)
        return JsonResponse({
            'status': 'error',
            'message': str(e)
        }, status=500)





@login_required
def getAnswers(request):
    try:
        task_id = request.GET.get('task_id')
        classroom_id = request.GET.get('classroom_id')
        user_id = request.GET.get('user_id')  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not all([task_id, classroom_id, user_id]):
            return JsonResponse({
                'status': 'error',
                'message': 'Missing required parameters: task_id, classroom_id or user_id'
            }, status=400)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id
        try:
            user = User.objects.get(id=user_id)
        except User.DoesNotExist:
            return JsonResponse({
                'status': 'error',
                'message': f'User with id {user_id} does not exist'
            }, status=404)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∑–∞–¥–∞—á–∏ –∏ –∫–ª–∞—Å—Å–∞
        task_obj = get_object_or_404(BaseTask, id=task_id)
        classroom_obj = get_object_or_404(Classroom, id=classroom_id)

        if request.user != user and request.user not in classroom_obj.teachers.all() and request.user not in classroom_obj.students.all():
            return JsonResponse({
                'status': 'error',
                'message': 'User does not have access to this task'
            }, status=403)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å UserAnswer –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        user_answer, created = UserAnswer.objects.get_or_create(
            user=user,
            task=task_obj,
            classroom=classroom_obj,
            defaults={
                'answer_data': [],
                'correct_answers': 0,
                'incorrect_answers': 0,
                'max_score': calculate_max_score(task_obj)
            }
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = {
            'status': 'success',
            'user_id': user.id,
            'task_id': task_id,
            'classroom_id': classroom_id,
            'correct_answers': user_answer.correct_answers,
            'incorrect_answers': user_answer.incorrect_answers,
            'max_score': user_answer.max_score + user_answer.incorrect_answers,
            'answers_history': user_answer.answer_data,
            'last_updated': user_answer.updated_at.isoformat(),
            'is_new_record': created
        }

        return JsonResponse(response_data)

    except Exception as e:
        import traceback
        traceback.print_exc()
        return JsonResponse({
            'status': 'error',
            'message': str(e),
            'details': traceback.format_exc()
        }, status=500)

def delete_answers(request):
    if request.method == 'POST':
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            data = json.loads(request.body)
            task_id = data.get('task_id')
            classroom_id = data.get('classroom_id')
            user_id = data.get('user_id')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if not all([task_id, classroom_id, user_id]):
                return JsonResponse({
                    'status': 'error',
                    'message': 'Missing required parameters: task_id or classroom_id'
                }, status=400)

            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∑–∞–¥–∞—á–∏ –∏ –∫–ª–∞—Å—Å–∞
            task_obj = get_object_or_404(BaseTask, id=task_id)
            classroom_obj = get_object_or_404(Classroom, id=classroom_id)
            user = User.objects.get(id=user_id)

            if request.user != user and request.user not in classroom_obj.teachers.all() and request.user not in classroom_obj.students.all():
                return JsonResponse({
                    'status': 'error',
                    'message': 'You are not authorized to delete this answer.'
                }, status=403)

            # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ task_id –∏ classroom_id
            answers_query = UserAnswer.objects.filter(
                task=task_obj,
                classroom=classroom_obj,
                user=user
            )

            # –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            deleted_count, _ = answers_query.delete()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            return JsonResponse({
                'status': 'success',
                'message': f'Successfully deleted {deleted_count} answer(s)',
                'deleted_count': deleted_count
            })

        except Exception as e:
            import traceback
            traceback.print_exc()
            return JsonResponse({
                'status': 'error',
                'message': str(e),
                'details': traceback.format_exc()
            }, status=500)

    else:
        return JsonResponse({
            'status': 'error',
            'message': 'Invalid request method. Use POST.'
        }, status=405)

def reorder_tasks(request):
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            if not data.get('tasks'):
                return JsonResponse(
                    {"status": "error", "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–∞—Ö"},
                    status=400
                )

            with transaction.atomic():
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                task_ids = [item['id'] for item in data['tasks']]
                existing_tasks = BaseTask.objects.filter(id__in=task_ids)
                existing_ids = set(str(task.id) for task in existing_tasks)

                task_to_check = existing_tasks[0]
                if task_to_check.section.lesson.course.user != request.user:
                    return JsonResponse(
                        {"status": "error", "message": "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ"},
                        status=403
                    )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                for item in data['tasks']:
                    if str(item['id']) not in existing_ids:
                        return JsonResponse(
                            {"status": "error", "message": f"–ó–∞–¥–∞—á–∞ {item['id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"},
                            status=404
                        )

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
                for item in data['tasks']:
                    BaseTask.objects.filter(id=item['id']).update(order=item['order'])

                return JsonResponse({"status": "success"})

        except Exception as e:
            return JsonResponse(
                {"status": "error", "message": str(e)},
                status=400
            )

def edge_tts_view(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            text = data.get('text', '')
            voice = data.get('voice', 'en-US-JennyNeural')
            rate = data.get('rate', '+0%')
            pitch = data.get('pitch', '+0Hz')

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not text or len(text) < 3 or len(text) > 5000:
                return JsonResponse({'error': 'Text must be between 3 and 5000 characters'}, status=400)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–º
            async def audio_stream():
                communicate = Communicate(text, voice, rate=rate, pitch=pitch)
                async for chunk in communicate.stream():
                    if chunk["type"] == "audio":
                        yield chunk["data"]

            response = StreamingHttpResponse(audio_stream(), content_type='audio/mpeg')
            response['Content-Disposition'] = 'inline; filename="speech.mp3"'
            return response

        except Exception as e:
            print(e)
            return JsonResponse({'error': str(e)}, status=500)

    return JsonResponse({'error': 'Only POST method allowed'}, status=405)






def choose_classroom(request, lesson_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ —Å AJAX-–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
    lesson_instance = get_object_or_404(lesson, id=lesson_id)

    if request.method == "POST":
        selected_class_id = request.POST.get("classroom_id")
        if selected_class_id:
            classroom = get_object_or_404(Classroom, id=selected_class_id)
            if request.user not in classroom.teachers.all():
                return JsonResponse({"success": False, "message": "You are not a teacher of this classroom"}, status=403)
            classroom.lesson = lesson_instance
            classroom.save()
            return redirect("classroom_view", classroom_id=selected_class_id)
        return JsonResponse({"success": False})

def create_classroom(request, lesson_id):
    if request.method == 'POST':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∏—Ç–µ–ª–µ–º
        if request.user.role != 'teacher':
            return JsonResponse({"success": False, "message": "You are not a teacher"}, status=403)

        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ POST-–∑–∞–ø—Ä–æ—Å–∞
        form = ClassroomForm(request.POST)
        if form.is_valid():
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å
            classroom = form.save(commit=False)
            classroom.lesson = lesson.objects.get(id=lesson_id)
            classroom.features = {"copying": True}
            classroom.save()

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —É—á–∏—Ç–µ–ª—è
            classroom.teachers.add(request.user)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            redirect_url = reverse("classroom_view", args=[classroom.id])

            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å AJAX, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-–æ—Ç–≤–µ—Ç
            if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
                return JsonResponse({"success": True, "redirect_url": redirect_url})

            # –ò–Ω–∞—á–µ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            return redirect(redirect_url)
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫–∏
            errors = {field: error for field, error in form.errors.items()}
            return JsonResponse({"success": False, "errors": errors}, status=400)
    else:
        # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ GET, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ä–º—É
        form = ClassroomForm()

    return render(request, 'classroom/create_classroom.html', {'form': form})

@login_required
def classroom_view(request, classroom_id):
    classroom_obj = Classroom.objects.get(id=classroom_id)

    if not classroom_obj or (request.user not in classroom_obj.teachers.all() and request.user not in classroom_obj.students.all()):
        return HttpResponseForbidden("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–ª–∞—Å—Å—É.")

    lesson_obj = classroom_obj.lesson
    sections = lesson_obj.sections.all().order_by('order')
    students = classroom_obj.students.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ –∫–ª–∞—Å—Å–∞
    teachers = classroom_obj.teachers.all()
    if request.user in teachers:
        user_role = 'teacher'
    else:
        user_role = 'student'

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏—Ö –ø–æ —Å–µ–∫—Ü–∏—è–º
    tasks = BaseTask.objects.filter(section__in=sections).select_related('content_type').order_by('order')

    section_tasks = []
    for section in sections:
        section_tasks.append({
            'id': section.id,
            'section_title': section.name,
            'tasks': [task for task in tasks if task.section_id == section.id]
        })

    return render(request, 'builder/updated_templates/classroom.html', {
        'classroom_id': classroom_obj.id,
        'classroom': classroom_obj,
        'lesson': lesson_obj,
        'section_list': sections,
        'section_tasks': section_tasks,
        'students': students,
        'teachers': teachers,
        'user_role': user_role,
        "tasks": tasks,
        "mode": "classroom",
        "user_id": request.user.id,
    })

@require_POST
def delete_classroom(request, classroom_id):
    classroom = get_object_or_404(Classroom, id=classroom_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–∏—Ç–µ–ª—å –≤ —ç—Ç–æ–º –∫–ª–∞—Å—Å–µ
    if request.user not in classroom.teachers.all():
        return JsonResponse({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤'}, status=403)

    try:
        with transaction.atomic():
            classroom.delete()
            return JsonResponse({'success': True})
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

def toggle_copying(request, classroom_id):
    if request.method == 'POST':
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –ø–æ ID
            classroom = Classroom.objects.get(id=classroom_id)

            if request.user not in classroom.teachers.all():
                return JsonResponse({
                    'success': False,
                    'error': '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–º—É –∫–ª–∞—Å—Å—É.'
                }, status=403)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            data = json.loads(request.body)
            allow_copying = data.get('allow_copying')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ allow_copying –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
            if allow_copying is None:
                return JsonResponse({
                    'success': False,
                    'error': '–ü–∞—Ä–∞–º–µ—Ç—Ä "allow_copying" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'
                }, status=400)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä features["copying"]
            classroom.features['copying'] = allow_copying
            classroom.save()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            return JsonResponse({
                'success': True,
                'new_state': allow_copying
            })

        except ObjectDoesNotExist:
            return JsonResponse({
                'success': False,
                'error': '–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.'
            }, status=404)

        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': str(e)
            }, status=500)

    # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ POST
    return JsonResponse({
        'success': False,
        'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.'
    }, status=405)



@login_required
def accept_invitation(request, code):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è."""
    invitation = get_object_or_404(ClassroomInvitation, code=code)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    if timezone.now() > invitation.expires_at:
        return redirect("invitation_expired")  # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞

    classroom = invitation.classroom

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–ª–∞—Å—Å–∞
    if request.user in classroom.students.all() or request.user in classroom.teachers.all():
        return redirect("classroom_view", classroom_id=classroom.id)  # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–ª–∞—Å—Å–∞

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    if request.user.is_authenticated:
        classroom.students.add(request.user)
        invitation.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        return redirect("classroom_view", classroom_id=classroom.id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    return redirect("register")

def create_invitation(request, classroom_id):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É."""
    classroom = get_object_or_404(Classroom, id=classroom_id)
    invitation = classroom.create_invitation()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É
    invitation_url = request.build_absolute_uri(
        reverse("accept_invitation", args=[invitation.code])
    )

    return JsonResponse({"invitation_url": invitation_url})
